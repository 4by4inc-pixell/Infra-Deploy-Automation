apiVersion: v1
kind: Service
metadata:
  name: raycluster-head-nlb
  namespace: ray
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-name: "prod-ray-nlb" # NLB 이름 지정
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Environment=prod"
    service.beta.kubernetes.io/aws-load-balancer-security-groups: ""      
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"                 
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing" 
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance" 
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "TCP" # 헬스체크 프로토콜
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "80"     # 헬스체크 포트 (Dashboard 서비스 포트)
  labels:
    app: raycluster
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster # 클러스터 내부에서 로드 밸런싱
  ports:
    - name: client
      port: 10001          # 외부에서 접근할 포트
      targetPort: 10001    # Pod의 컨테이너 포트
      protocol: TCP
    - name: dashboard
      port: 80           # 외부에서 접근할 포트
      targetPort: 8265     # Pod의 컨테이너 포트
      protocol: TCP
    # - name: gcs
    #   port: 6379           # 외부에서 접근할 포트
    #   targetPort: 6379     # Pod의 컨테이너 포트
    #   protocol: TCP
    - name: metrics
      port: 8080           # 외부에서 접근할 포트
      targetPort: 8080     # Pod의 컨테이너 포트
      protocol: TCP
  selector:
    app.kubernetes.io/created-by: kuberay-operator
    app.kubernetes.io/name: kuberay
    ray.io/cluster: raycluster
    ray.io/identifier: raycluster-head
    ray.io/node-type: head